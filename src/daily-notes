#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# daily-nots.py
# This program is targeted to who will make some notes everyday. 
#
# Copyright (C) 2009 Ray Wang <raywang@gnome.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

# for pydoc support
""" 
This program is targeted to who will make some notes everyday.

Although, this program is immature and unprofessional, it just could be
looked as a small practice on my programming road. 
"""

__author__ = "Ray Wang"
__version__ = "0.2.0"

# imports
import os
import sys
import time
import dbus
import sqlite3
import gettext
import gtk
import pygtk
pygtk.require('2.0')

# for i18n support
app_name = "daily-notes"
gettext.bindtextdomain(app_name)
gettext.textdomain(app_name)
_ = gettext.gettext

# the file which log the daily notes
db_file = os.getenv('HOME') + "/.daily_notes.sqlite"
ui_file = os.path.join(sys.path[0], "..", "share", app_name, "daily-notes.ui")

# Class
class Daily_notes:
    """Daily_notes class"""

    def __init__(self):
        """Daily_notes init function"""
        # create UI
        self.ui = gtk.Builder()
        self.ui.add_from_file(ui_file)

        # show GUI
        window = self.ui.get_object("main_window")
        window.show_all()

        # get objecgts
        quit_button = self.ui.get_object("Quit")
        save_button = self.ui.get_object("Save")
        about_button = self.ui.get_object("About")
        self.calendar = self.ui.get_object("calendar")
        self.entry = self.ui.get_object("entry")

        # connect signals
        window.connect("destroy", lambda x: gtk.main_quit())
        quit_button.connect("clicked", lambda x: gtk.main_quit())
        about_button.connect("clicked", self.show_about)
        save_button.connect("clicked", self.save_note)
        self.calendar.connect("day-selected", self.update_ui)

        # connect to database
        self.init_db(db_file)

        # init DBus
        self.init_dbus()

        # update ui
        self.update_ui(None)

    def delete_event(self, widget, event, data=None):
        """program quit when kill the window by window manager"""
        gtk.main_quit()
        return False

    def show_about(self, widget):
        """show about dialog"""
        about_dialog = self.ui.get_object("aboutdialog")
        about_dialog.show_all()

    def init_db(self, db_file):
        """initialize sqlite backend"""
        self.conn = sqlite3.connect(db_file)
        self.cursor = self.conn.cursor()
        try:
            has_table = self.cursor.execute("SELECT * FROM notes_table")
        except sqlite3.OperationalError, e:
            if e.args[0].startswith("no such table:"):
                self.cursor.execute("""
                    CREATE TABLE notes_table
                                 (date date, notes varchar)
                """)

    def update_ui(self, widget):
        """
        update the entry and mark that day if the day you selected has notes
        """
        self.date = self._get_date()
        self.cursor.execute("""
                SELECT *
                  FROM notes_table
                 WHERE date = ?
        """, (self.date,))
        record = self.cursor.fetchone()
        if record is None:
            self.entry.set_text('')
        else:
            notes = record[1]
            self.entry.set_text(notes)
            if notes != '':
                self.send_notification(self.date, _("You have a notes today!"))

        # update marks
        self._mark_days()

    def save_note(self, widget):
        """save the note which written for the day"""
        notes = self._get_notes()
        self._save_to_db(self.date, notes)
        self._mark_days()
        self.send_notification(self.date, _("New note saved!"))
        
    def _get_date(self):
        # get the date you selected
        (year, month, day) = self.calendar.get_date()
        # since month is zero-based, in order to avoid being confused
        # we plus one.
        mydate = time.mktime((year, (month + 1), day, 0, 0, 0, 0, 0, -1))
        date = time.strftime("%F", time.localtime(mydate))
        return date

    def _get_notes(self):
        # get note you take
        notes = self.entry.get_text()
        return notes
        
    def _save_to_db(self, date, notes):
        # save the note into database

        # to determine which a record is exist.
        self.cursor.execute("""
                SELECT * 
                  FROM notes_table 
                 WHERE date = ?
        """, (date,))

        # if the record is not exist, then we will insert the new one.
        # if the record is exist. then we just update it.
        if self.cursor.fetchone() is None:
            self.cursor.execute("""
                    INSERT INTO notes_table
                         VALUES (?, ?)
            """, (date, notes))
        else:
            self.cursor.execute("""
                    UPDATE notes_table
                       SET notes = ?
                     WHERE date = ?
            """, (notes, date))

        # commit records back to database
        self.conn.commit()

    def _mark_days(self):
        # mark the day you selected

        # clear all the marks first
        self.calendar.clear_marks()
        year_month = self.date[:7]
        begin = "%s-%s" % (year_month, '01')
        end = "%s-%s" % (year_month, '31')
        self.cursor.execute("""
                SELECT *
                  FROM notes_table
                 WHERE date 
               BETWEEN ?
                   AND ?
        """, (begin, end))
        records = self.cursor.fetchall()
        for (d, n) in records:
            if n != '':
                self.calendar.mark_day(int(d[-2:]))

    def init_dbus(self):
        """init dbus connection"""
        # How to use DBus:
        # 1) connect to bus. 
        bus = dbus.SessionBus()
        # 2) create a object
        # dbus.get_object(self, bus_name, object_path, introspect=True, 
        #                           follow_name_owner_changes=False, **kwargs)
        # the get_object() method returns an object as know as a "proxy" object,
        # it means that "notify_object" is a proxy.
        notify_object = bus.get_object("org.freedesktop.Notifications",
                                            "/org/freedesktop/Notifications")
        # 3) get an interface
        # Class dbus.Interface.__init__(self, object, dbus_interface)
        self.notify_interface = dbus.Interface(notify_object,
                                            "org.freedesktop.Notifications")               
        self.icon_prefix = "file:///usr/share/pixmaps/"

    def send_notification(self, notify_title, notify_text):
        """pops up notification on your desktop to notify you."""
        # http://www.galago-project.org/specs/notification/0.9/index.html
        # UINT32 org.freedesktop.Notifications.Notify 
        # (STRING app_name, UINT32 replaces_id, STRING app_icon, 
        #  STRING summary, STRING body, ARRAY actions, DICT hints, 
        # INT32 expire_timeout);
        self.notify_interface.Notify(_("daily-notes"), 
                0, 
                self.icon_prefix + app_name + ".svg", 
                notify_title, 
                notify_text, 
                [], 
                {}, 
                # 0  - never close notification
                # -1 - notification's expiration time is dependent on the 
                # notification server's settings
                # xx - notification closed after xx millisecond 
                -1)

# if this script was run in terminal
if __name__ == "__main__":
    app = Daily_notes()
    gtk.main()
    sys.exit(0)
